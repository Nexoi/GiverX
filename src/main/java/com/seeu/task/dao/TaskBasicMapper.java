package com.seeu.task.dao;

import com.seeu.task.model.TaskBasic;
import com.seeu.task.model.TaskBasicWithBLOBs;
import org.apache.ibatis.annotations.*;
import org.apache.ibatis.type.JdbcType;

import java.util.List;

public interface TaskBasicMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table task_basic
     *
     * @mbggenerated Thu Jan 19 18:24:25 CST 2017
     */
    @Delete({
            "delete from task_basic",
            "where TID = #{TID,jdbcType=INTEGER}"
    })
    int deleteByPrimaryKey(Integer TID);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table task_basic
     *
     * @mbggenerated Thu Jan 19 18:24:25 CST 2017
     */
    @Insert({
            "insert into task_basic (TID, UID, ",
            "title, time, tag, ",
            "liker_num, read_num, ",
            "comment_num, status, ",
            "money, note, ",
            "pictures)",
            "values (#{TID,jdbcType=INTEGER}, #{UID,jdbcType=INTEGER}, ",
            "#{title,jdbcType=VARCHAR}, #{time,jdbcType=TIMESTAMP}, #{tag,jdbcType=VARCHAR}, ",
            "#{liker_num,jdbcType=INTEGER}, #{read_num,jdbcType=INTEGER}, ",
            "#{comment_num,jdbcType=INTEGER}, #{status,jdbcType=INTEGER}, ",
            "#{money,jdbcType=DECIMAL}, #{note,jdbcType=LONGVARCHAR}, ",
            "#{pictures,jdbcType=LONGVARCHAR})"
    })
    int insert(TaskBasicWithBLOBs record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table task_basic
     *
     * @mbggenerated Thu Jan 19 18:24:25 CST 2017
     */
    @InsertProvider(type = TaskBasicSqlProvider.class, method = "insertSelective")
    @Options(useGeneratedKeys = true, keyProperty = "TID", keyColumn = "TID")
    int insertSelective(TaskBasicWithBLOBs record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table task_basic
     *
     * @mbggenerated Thu Jan 19 18:24:25 CST 2017
     */
    @Select({
            "select",
            "TID, UID, title, time, tag, liker_num, read_num, comment_num, status, money, ",
            "note, pictures",
            "from task_basic",
            "where TID = #{TID,jdbcType=INTEGER}"
    })
    @Results({
            @Result(column = "TID", property = "TID", jdbcType = JdbcType.INTEGER, id = true),
            @Result(column = "UID", property = "UID", jdbcType = JdbcType.INTEGER),
            @Result(column = "title", property = "title", jdbcType = JdbcType.VARCHAR),
            @Result(column = "time", property = "time", jdbcType = JdbcType.TIMESTAMP),
            @Result(column = "tag", property = "tag", jdbcType = JdbcType.VARCHAR),
            @Result(column = "liker_num", property = "liker_num", jdbcType = JdbcType.INTEGER),
            @Result(column = "read_num", property = "read_num", jdbcType = JdbcType.INTEGER),
            @Result(column = "comment_num", property = "comment_num", jdbcType = JdbcType.INTEGER),
            @Result(column = "status", property = "status", jdbcType = JdbcType.INTEGER),
            @Result(column = "money", property = "money", jdbcType = JdbcType.DECIMAL),
            @Result(column = "note", property = "note", jdbcType = JdbcType.LONGVARCHAR),
            @Result(column = "pictures", property = "pictures", jdbcType = JdbcType.LONGVARCHAR)
    })
    TaskBasicWithBLOBs selectByPrimaryKey(Integer TID);



    @Select({
            "select",
            "TID, UID, title, time, tag, liker_num, read_num, comment_num, status, money, ",
            "note, pictures",
            "from task_basic",
            "limit 0,#{limit,jdbcType=INTEGER}"
    })
    @Results({
            @Result(column = "TID", property = "TID", jdbcType = JdbcType.INTEGER, id = true),
            @Result(column = "UID", property = "UID", jdbcType = JdbcType.INTEGER),
            @Result(column = "title", property = "title", jdbcType = JdbcType.VARCHAR),
            @Result(column = "time", property = "time", jdbcType = JdbcType.TIMESTAMP),
            @Result(column = "tag", property = "tag", jdbcType = JdbcType.VARCHAR),
            @Result(column = "liker_num", property = "liker_num", jdbcType = JdbcType.INTEGER),
            @Result(column = "read_num", property = "read_num", jdbcType = JdbcType.INTEGER),
            @Result(column = "comment_num", property = "comment_num", jdbcType = JdbcType.INTEGER),
            @Result(column = "status", property = "status", jdbcType = JdbcType.INTEGER),
            @Result(column = "money", property = "money", jdbcType = JdbcType.DECIMAL),
            @Result(column = "note", property = "note", jdbcType = JdbcType.LONGVARCHAR),
            @Result(column = "pictures", property = "pictures", jdbcType = JdbcType.LONGVARCHAR)
    })
    List<TaskBasicWithBLOBs> selectRefresh(@Param("limit") Integer limit);



    @Select({
            "select",
            "TID, UID, title, time, tag, liker_num, read_num, comment_num, status, money, ",
            "note, pictures",
            "from task_basic",
            "where TID > #{TID,jdbcType=INTEGER}",
            "order by TID desc ",
            "limit #{limit,jdbcType=INTEGER}"
    })
    @Results({
            @Result(column = "TID", property = "TID", jdbcType = JdbcType.INTEGER, id = true),
            @Result(column = "UID", property = "UID", jdbcType = JdbcType.INTEGER),
            @Result(column = "title", property = "title", jdbcType = JdbcType.VARCHAR),
            @Result(column = "time", property = "time", jdbcType = JdbcType.TIMESTAMP),
            @Result(column = "tag", property = "tag", jdbcType = JdbcType.VARCHAR),
            @Result(column = "liker_num", property = "liker_num", jdbcType = JdbcType.INTEGER),
            @Result(column = "read_num", property = "read_num", jdbcType = JdbcType.INTEGER),
            @Result(column = "comment_num", property = "comment_num", jdbcType = JdbcType.INTEGER),
            @Result(column = "status", property = "status", jdbcType = JdbcType.INTEGER),
            @Result(column = "money", property = "money", jdbcType = JdbcType.DECIMAL),
            @Result(column = "note", property = "note", jdbcType = JdbcType.LONGVARCHAR),
            @Result(column = "pictures", property = "pictures", jdbcType = JdbcType.LONGVARCHAR)
    })
    List<TaskBasicWithBLOBs> selectByPrimaryKeyMoreNew(@Param("TID") Integer TID, @Param("limit") Integer limit);

    @Select({
            "select",
            "TID, UID, title, time, tag, liker_num, read_num, comment_num, status, money, ",
            "note, pictures",
            "from task_basic",
            "where TID < #{TID,jdbcType=INTEGER}",
            "order by TID desc ",
            "limit #{limit,jdbcType=INTEGER}"
    })
    @Results({
            @Result(column = "TID", property = "TID", jdbcType = JdbcType.INTEGER, id = true),
            @Result(column = "UID", property = "UID", jdbcType = JdbcType.INTEGER),
            @Result(column = "title", property = "title", jdbcType = JdbcType.VARCHAR),
            @Result(column = "time", property = "time", jdbcType = JdbcType.TIMESTAMP),
            @Result(column = "tag", property = "tag", jdbcType = JdbcType.VARCHAR),
            @Result(column = "liker_num", property = "liker_num", jdbcType = JdbcType.INTEGER),
            @Result(column = "read_num", property = "read_num", jdbcType = JdbcType.INTEGER),
            @Result(column = "comment_num", property = "comment_num", jdbcType = JdbcType.INTEGER),
            @Result(column = "status", property = "status", jdbcType = JdbcType.INTEGER),
            @Result(column = "money", property = "money", jdbcType = JdbcType.DECIMAL),
            @Result(column = "note", property = "note", jdbcType = JdbcType.LONGVARCHAR),
            @Result(column = "pictures", property = "pictures", jdbcType = JdbcType.LONGVARCHAR)
    })
    List<TaskBasicWithBLOBs> selectByPrimaryKeyMoreOld(@Param("TID") Integer TID, @Param("limit") Integer limit);

    @Select({
            "select",
            "TID, UID, status ",
            "from task_basic",
            "where TID = #{TID,jdbcType=INTEGER}"
    })
    @Results({
            @Result(column = "TID", property = "TID", jdbcType = JdbcType.INTEGER, id = true),
            @Result(column = "UID", property = "UID", jdbcType = JdbcType.INTEGER),
            @Result(column = "status", property = "status", jdbcType = JdbcType.INTEGER)
    })
    TaskBasic selectStatusByPrimaryKey(Integer TID);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table task_basic
     *
     * @mbggenerated Thu Jan 19 18:24:25 CST 2017
     */
    @UpdateProvider(type = TaskBasicSqlProvider.class, method = "updateByPrimaryKeySelective")
    int updateByPrimaryKeySelective(TaskBasicWithBLOBs record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table task_basic
     *
     * @mbggenerated Thu Jan 19 18:24:25 CST 2017
     */
    @Update({
            "update task_basic",
            "set UID = #{UID,jdbcType=INTEGER},",
            "title = #{title,jdbcType=VARCHAR},",
            "time = #{time,jdbcType=TIMESTAMP},",
            "tag = #{tag,jdbcType=VARCHAR},",
            "liker_num = #{liker_num,jdbcType=INTEGER},",
            "read_num = #{read_num,jdbcType=INTEGER},",
            "comment_num = #{comment_num,jdbcType=INTEGER},",
            "status = #{status,jdbcType=INTEGER},",
            "money = #{money,jdbcType=DECIMAL},",
            "note = #{note,jdbcType=LONGVARCHAR},",
            "pictures = #{pictures,jdbcType=LONGVARCHAR}",
            "where TID = #{TID,jdbcType=INTEGER}"
    })
    int updateByPrimaryKeyWithBLOBs(TaskBasicWithBLOBs record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table task_basic
     *
     * @mbggenerated Thu Jan 19 18:24:25 CST 2017
     */
    @Update({
            "update task_basic",
            "set UID = #{UID,jdbcType=INTEGER},",
            "title = #{title,jdbcType=VARCHAR},",
            "time = #{time,jdbcType=TIMESTAMP},",
            "tag = #{tag,jdbcType=VARCHAR},",
            "liker_num = #{liker_num,jdbcType=INTEGER},",
            "read_num = #{read_num,jdbcType=INTEGER},",
            "comment_num = #{comment_num,jdbcType=INTEGER},",
            "status = #{status,jdbcType=INTEGER},",
            "money = #{money,jdbcType=DECIMAL}",
            "where TID = #{TID,jdbcType=INTEGER}"
    })
    int updateByPrimaryKey(TaskBasic record);

    @Update({
            "update task_basic",
            "set liker_num = liker_num + 1 ",
            "where TID = #{TID,jdbcType=INTEGER}"
    })
    int updateLikerPlusOne(Integer TID);

    @Update({
            "update task_basic",
            "set liker_num = liker_num - 1 ",
            "where TID = #{TID,jdbcType=INTEGER}"
    })
    int updateLikerDecreaseOne(Integer TID);

    @Update({
            "update task_basic",
            "set read_num = read_num + 1 ",
            "where TID = #{TID,jdbcType=INTEGER}"
    })
    int updateReadPlusOne(Integer TID);

    @Update({
            "update task_basic",
            "set read_num = read_num - 1 ",
            "where TID = #{TID,jdbcType=INTEGER}"
    })
    int updateReadDecreaseOne(Integer TID);

    @Update({
            "update task_basic",
            "set comment_num = comment_num + 1 ",
            "where TID = #{TID,jdbcType=INTEGER}"
    })
    int updateCommentPlusOne(Integer TID);

    @Update({
            "update task_basic",
            "set comment_num = comment_num - 1 ",
            "where TID = #{TID,jdbcType=INTEGER}"
    })
    int updateCommentDecreaseOne(Integer TID);
}